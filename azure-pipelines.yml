name: Azure Pipelines

# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
trigger:
- main

# ToDo: Replace the agent pool name, if you are using Udacity Cloud lab. 
# Otherwise, comment out the line below. 
pool: myAgentPool

variables:
  python.version: '3.11.7'
  # ToDo: Replace the service connection name as used in the DevOps project settings
  azureServiceConnectionId: 'myServiceConnectionId'
  # Project root folder. Point to the folder containing manage.py file.
  projectRoot: $(System.DefaultWorkingDirectory)
  # Environment name
  environmentName: 'test'
  WORKSPACE_ID: '81f7498c-a9c7-4f4e-9a3d-bc4f43c25453'
  WORKSPACE_KEY: '9MP25c3+oPxjUjYWfqJKGgGQHxrwHWB0LWr1fpAUFexpXAuynDJ0wiHl9924M11WqT2VOClFaqp81EZ4Orkq0A=='
  applyRequired : false

stages:
#--------------------------------------------#  
# BUILD STAGE
#--------------------------------------------#    
- stage: Build
  jobs:
  - job: BuildInfrastructure
    steps:
    #--------------------------------------------#  
    # Use Terraform to create the Infrastructure      
    # Install Terraform on the pipeline agent 
    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
      displayName: 'Terrafom installation'
      inputs:
        terraformVersion: '1.2.9'
    
    # Run Terraform Init on the pipeline agent 
    # ToDo: Replace the resource group name, storage account name, and container name below
    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@3
      displayName: 'Terrafom init'
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        backendServiceArm: '$(azureServiceConnectionId)'
        backendAzureRmResourceGroupName: 'Azuredevops2'
        backendAzureRmStorageAccountName: 'tfstate166962342'
        backendAzureRmContainerName: 'tfstate'
        backendAzureRmKey: 'test.terraform.tfstate'

    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@3
      displayName: Terraform validate
      inputs:
        provider: 'azurerm'
        command: 'validate'

    # OPTIONAL - This step is needed only if your Terraform VM uses an SSH key pair for login and you want your pipeline agent to connect to it. 
    # Generate an SSH key pair in your local/AZ Cloud shell. Use the public key in the Terraform VM module. 
    # Install public key and private key file to the pipeline agent, using the task below. 
    # ToDo: Change the inputs value below
    - task: InstallSSHKey@0
      inputs:
        knownHostsEntry: '172.191.157.47 ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCuuOX0HGCDgmgYDVWMywOsOHwN3fLcNqmu4T54QUfVJMQm+dpUSuhn2GuXun6YW06EySm3B7UoxLiVjvO5WfpIc8Qkof/fezc90XTD3XUcRpQZB9+HM3Oz+Wld2diX4nE1+PU8dOrsG3MY6KkkMbRc2udbwWNBIEor2h6j/4jyHgMJNhAunGMlCiBf8ncnvilBWuWL+F4SDKvue8/mKwLQ7LQ/6PU4ByPHD/rbPvAkAz30CKF4kS+uWWhtznZQFEY5aKweJ52Nr1D6QQnQC7HzgiXB0eKWlgYLwJRKsmRsSKuruFKxWsewC4Ul4uUUdODJyzoT4FhA60denh09lKQxgHSAhiy4M6Ky6+9HiA7TLq1JgnFQSmFa9PgRr3s3el8kKY5hkQ4Ad1dacM/+F37ompv7r6yjKxiYaALuypy1x0hBkmH5Y4wepsBpn6a1ArTiBkECFXOqK75WoAQK3ab3M7Mr85ChIFFLZle82v2K1bXVCNQ5m8aLAAqF2cL7m+k=' # variable value
        sshPublicKey: 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQChjWyIqrhPURBUSKvH4XCchNyTa/ZA/5ISYRjv77sedtqiZ0AVrKc2+t7oxLZBlOchFVFW4mVZ6YsiKJASGJgHS+CRSJ4LxT4hiO5ocL+48QHwRrR3P16nTxffJGKWrOoxyM/Yie1dTMSzRWH0GsnwrCRnHAbnLuPqtKrfGPpnB8y1xlvXFnz4x3oCRmMiCwzGXHhg9A65A36PqWH1+8F9AJRzvJcFSg/DAQjYPDVL6m2RmjZxGPiE0cOJi7OO7hpmFbPVO7D/MBB9crFSXTpq1dr8hZhZfa+ESpUXEC64o/4EYmHrC4SvodSHn3ZWTKvf3nXiU1OpnIYJJeAFkmIVEoOM9SDLewQacRrm7fHHruwo/tzYvhj7Co1cTcWssywJxv9FRXqA2OGXwo4zKKWU+JdFR4LFHb3f1NpXT5bzWm5+PjxZ/weV9gxtQlQPBoZ5vC4Axmv1B3EB6SEyux5CoNZikSadGrgWsXRi/OaU56efWV6pcCE0QlyvSf/9Ijs= MohamedShaban@MohamedShaaban'            # variable value
        sshKeySecureFile: 'id_rsa.pub' 
    # Use secure file feature in the pipeline library UI to save the "id_rsa" file, as mentioned here: https://learn.microsoft.com/en-us/azure/devops/pipelines/library/secure-files?view=azure-devops#add-a-secure-file
    
    - task: DownloadSecureFile@1
      name: udacity_public_key
      displayName: 
      inputs:
       secureFile: 'id_rsa.pub'


    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@3
      displayName: 'Terraform Plan'
      inputs:
        provider: 'azurerm'
        command: 'plan'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        environmentServiceNameAzureRM: '$(azureServiceConnectionId)'
        backendServiceArm: '$(azureServiceConnectionId)'
        backendAzureRmResourceGroupName: 'Azuredevops2'
        backendAzureRmStorageAccountName: 'tfstate166962342'
        backendAzureRmContainerName: 'tfstate'
        backendAzureRmKey: 'test.terraform.tfstate'
        vars: |
          key1=value1
        commandOptions: '-out=tfplan'
      name: TerraformPlan
      continueOnError: true

    - script: |
        echo "Checking if plan contains changes..."
        terraform show -no-color tfplan > plan.txt
        if grep -q "No changes. Infrastructure is up-to-date." plan.txt; then
          echo "No changes detected."
          echo "##vso[task.setvariable variable=applyRequired;isOutput=true]false"
        else
          echo "Changes detected."
          echo "##vso[task.setvariable variable=applyRequired;isOutput=true]true"
        fi
      name: DetectChanges
      displayName: 'Detect Changes from Plan'
      workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'


    # Run Terraform Apply
    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@3
      displayName: Terraform apply
      condition: eq(dependencies.DetectChanges.outputs['DetectChanges.applyRequired'], 'true')
      inputs:
        provider: 'azurerm'
        command: 'apply'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        environmentServiceNameAzureRM: '$(azureServiceConnectionId)'
        backendServiceArm: '$(azureServiceConnectionId)'
        backendAzureRmResourceGroupName: 'Azuredevops2'
        backendAzureRmStorageAccountName: 'tfstate166962342'
        backendAzureRmContainerName: 'tfstate'
        backendAzureRmKey: 'test.terraform.tfstate'

    # ToDo: Change the workingDirectory path, as applicable to you
    # Destroy the resources in Azure by running a separate pipeline. 
    # - task: TerraformTaskV3@3
    #   displayName: Terraform destroy
    #   inputs:
    #     provider: 'azurerm'
    #     command: 'destroy'
    #     workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
    #     environmentServiceNameAzureRM: '$(azureServiceConnectionId)'

#--------------------------------------------#    
    # Postman - Install Newman    
    # ToDo: Update the command and verify the working directory
    - task: CmdLine@2
      displayName: Install NPM and Newman
      inputs:
        script: |
          curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
          sudo apt-get install -y nodejs
          sudo npm install -g newman
        workingDirectory: $(System.DefaultWorkingDirectory)
    # Postman Data Validation Test Suite    
    # ToDo: Verify the working directory
    - task: CmdLine@2
      displayName: Run Data Validation Tests
      continueOnError: true
      inputs:
        script: 'newman run TestSuite.Data-Validation.json -e Test.environment.json --reporters cli,junit --reporter-junit-export TEST-DataValidation.xml'
        workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'
    # Postman Regression Test Suite    
    # ToDo: Verify the working directory
    - task: CmdLine@2
      displayName: Run Regression Tests
      continueOnError: true
      inputs:
        script: 'newman run TestSuite.Regression.json -e Test.environment.json --reporters cli,junit --reporter-junit-export TEST-Regression.xml'
        workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'
    # Postman - Publish Results 
    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '$(System.DefaultWorkingDirectory)/automatedtesting/postman/TEST-Regression.xml'
        failTaskOnFailedTests: false
        testRunTitle: 'Postman API Tests'
      condition: succeededOrFailed()
      displayName: 'Publish Postman Test Results'


    # ToDo: Complete the task as explained here: https://learn.microsoft.com/en-us/azure/devops/pipelines/tasks/test/publish-test-results?view=azure-devops&tabs=trx%2Cyaml#yaml-snippet
    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '**/TEST-*.xml'
        searchFolder: '$(System.DefaultWorkingDirectory)/automatedtesting/postman' # ToDo
        mergeTestResults: true
        testRunTitle: 'Postman API Test Results'      # ToDo

    #--------------------------------------------#
    # Selenium (UI) Test Suite - Archive the package  
    # "ArchiveFiles@2" picks up the web package and archives it.
    - task: ArchiveFiles@2
      displayName: 'Archive UI Tests'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/selenium'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-uitests.zip'
    # Selenium Test Suite - Publish the package  
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-uitests.zip   # Same as the archiveFile artifact above. 
      displayName: 'Upload Package'
      artifact: drop-uitests

    #--------------------------------------------#    
    # FakeRestAPI - Archive
    # ToDo: Complete the ArchiveFiles@2 task and publish step 
    - task: ArchiveFiles@2
      displayName: 'Archive FakeRestAPI'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter/fakerestapi'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
      displayName: 'Upload Package'
      artifact: drop-fakerestapi

    #--------------------------------------------#  
    # JMeter (Performance) Test Suite - Archive
    # ToDo: Complete the ArchiveFiles@2 task and publish step 
    - task: ArchiveFiles@2
      displayName: 'Archive PerformanceTestSuite'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-perftests.zip'
    # JMeter Test Suite - Publish    
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-perftests.zip
      displayName: 'Upload Package'
      artifact: drop-perftests

#--------------------------------------------#  
# DEPLOYMENT STAGE
#--------------------------------------------#    
- stage: Deploy
  jobs:
  #--------------------------------------------#  
  # Deploy FakeRestAPI Web App
  # ToDo: Provide <environment name> you created in your DevOps project
  - deployment: FakeRestAPI
    pool: myAgentPool
    environment: my-test-vm   # ToDo
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: 'Deploy Azure Web App'
            inputs:
              azureSubscription: '$(azureServiceConnectionId)'     # ToDo
              appName: 'myApplication714-AppService'               # ToDo
              appType: webApp
              package: $(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip       # ToDo: Use the published zip artifact. 
          #--------------------------------------------#    
          
          - task: CmdLine@2
            inputs:
              script: |
                sudo apt-get install -y openjdk-11-jre-headless
                echo "##vso[task.setvariable variable=JAVA_HOME]/usr/lib/jvm/java-11-openjdk-amd64"
                export JAVA_HOME=/usr/lib/jvm/java-11-openjdk-amd64
                java -version
            displayName: 'Install and Set JAVA_HOME'          

          # Run JMeter test suite against the App Service
          - task: CmdLine@2
            inputs:
              script: |
                wget "https://downloads.apache.org/jmeter/binaries/apache-jmeter-5.6.3.tgz"
                tar -xf apache-jmeter-5.6.3.tgz
                unzip -o $(Build.BuildId)-perftests.zip
                ./apache-jmeter-5.6.3/bin/jmeter -n -t EnduranceTest.jmx -Jdata=reference_data.csv -j EnduranceTest.log -f
                ./apache-jmeter-5.6.3/bin/jmeter -n -t StressTest.jmx -Jdata=reference_data.csv -j StressTest.log -f
                cat EnduranceTest.log
                cat StressTest.log
                cat Endurance_Test_Result.csv  
                cat Stress_Test_Result.csv                                                                           # ToDo: Write your commands
                 # ToDo: Write your commands
              workingDirectory: $(Pipeline.Workspace)/drop-perftests     
            displayName: 'Jmeter Test'                 
          # ToDo: Use the artifact name from the task above
              
  #--------------------------------------------#  
  # Selenium | Functional UI Tests
  # ToDo: 
  - deployment: VMDeploy
    displayName: Selenium Tests
    environment:
      name: my-test-vm  # ToDo: Change/provide a name
      resourceType: VirtualMachine
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: drop-uitests     # ToDo: Change/provide a name
            
          - task: Bash@3
            inputs:
              targetType: 'inline'
              script: |           
                #! /bin/bash
                
                sudo apt-get upgrade -y
                sudo apt-get install python3-pip -y
                sudo apt-get install unzip -y
                sudo apt-get install -y chromium-browser
                pip3 install selenium
                cd ~/
                DIR=/home/azureuser/app
                if [ ! -d "$DIR" ]; then
                    mkdir app
                fi
                mv /home/azureuser/azagent/_work/1/drop-uitests/$(Build.BuildId)-uitests.zip app
                cd app
                unzip -o $(Build.BuildId)-uitests.zip
                FILE=/home/azure/app/chromedriver_linux64.zip
                if [ ! -f "$FILE" ]; then
                    wget https://storage.googleapis.com/chrome-for-testing-public/136.0.7103.94/linux64/chromedriver-linux64.zip
                    unzip -o chromedriver-linux64.zip
                    chmod +x "$PWD/chromedriver-linux64/chromedriver"
                    sudo cp "$PWD/chromedriver-linux64/chromedriver" /usr/local/bin/chromedriver
                    sudo ln -sf $PWD/chromedriver-linux64/chromedriver /usr/local/bin/chromedriver
                fi
                export PATH=$PATH:/home/azureuser/app
                echo "Starting Selenium Tests"
                python3 add_remove_from_cart.py
                echo "Completed Selenium Tests. Check selenium.log for results."